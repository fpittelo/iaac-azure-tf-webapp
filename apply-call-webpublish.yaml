---
trigger:
  branches:
    include:
    - dev
  paths:
    exclude: # You can exclude paths that don't require a build.
    - README.md 
    - .gitignore
    - '**/*.yaml'

pr:
  autoCancel: true # Cancels running jobs if a new update to the same PR is pushed.
  branches:
    include:
    - main
    exclude:
    - dev
    - qa

pool:
  vmImage: ubuntu-latest

variables:
  rg_group: LABS
  sa_name: iaaclabs
  cont_name: iaacazuretfwebapp
  storage_key: terraform.tfstate
  service_acct: iaac-service

resources:
  repositories:
    - repository: website
      type: github
      name: fpittelo/website
      endpoint: iaac-github
      ref: refs/heads/dev

stages:
  
  - stage: cleanUp
    displayName: Clean Up labs
    jobs:
      - job: cleanUpKeyVault
        displayName: Clean Up Key Vault
        steps:
          - task: TerraformInstaller@0
            displayName: install
            inputs:
              terraformVersion: latest
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: azurerm
              command: init
              backendServiceArm: $(service_acct)
              backendAzureRmResourceGroupName: $(rg_group)
              backendAzureRmStorageAccountName: $(sa_name)
              backendAzureRmContainerName: $(cont_name)
              backendAzureRmKey: $(storage_key)

          # Import Diagnostic Setting state
          - task: TerraformTaskV3@3
            displayName: "Import Diagnostic Setting State"
            inputs:
              provider: azurerm
              command: import
              commandOptions: 'azurerm_monitor_diagnostic_setting.iaacvault "/subscriptions/a6f24a81-7804-44a9-b074-25a9781afd24/resourceGroups/LABS/providers/Microsoft.KeyVault/vaults/iaac-webapp-vault/providers/microsoft.insights/diagnosticSettings/iaac-webapp-vault-logs"'
              environmentServiceNameAzureRM: iaac-service

          # Import Key Vault state
          - task: TerraformTaskV3@3
            displayName: "Import Key Vault State"
            inputs:
              provider: azurerm
              command: import
              commandOptions: 'azurerm_key_vault.iaac_webapp_vault "/subscriptions/a6f24a81-7804-44a9-b074-25a9781afd24/resourceGroups/LABS/providers/Microsoft.KeyVault/vaults/iaac-webapp-vault"'
              environmentServiceNameAzureRM: iaac-service

          # Terraform destroy step for Key Vault
          - task: TerraformTaskV3@3
            displayName: "Purge Key Vault"
            inputs:
              provider: azurerm
              command: destroy
              commandOptions: '-target=azurerm_key_vault.iaac_webapp_vault -auto-approve'
              environmentServiceNameAzureRM: iaac-service
  
  - stage: validate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: install
            inputs:
              terraformVersion: latest
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: azurerm
              command: init
              backendServiceArm: iaac-service
              backendAzureRmResourceGroupName: LABS
              backendAzureRmStorageAccountName: iaaclabs
              backendAzureRmContainerName: iaacazuretfwebapp
              backendAzureRmKey: terraform.tfstate
          - task: TerraformTaskV3@3
            displayName: validate
            inputs:
              provider: azurerm
              command: validate
  - stage: deploy
    condition: succeeded('validate')
    dependsOn: validate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: install
            inputs:
              terraformVersion: latest
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: azurerm
              command: init
              backendServiceArm: iaac-service
              backendAzureRmResourceGroupName: LABS
              backendAzureRmStorageAccountName: iaaclabs
              backendAzureRmContainerName: iaacazuretfwebapp
              backendAzureRmKey: terraform.tfstate
          - task: TerraformTaskV3@3
            displayName: plan
            inputs:
              provider: azurerm
              command: plan
              environmentServiceNameAzureRM: iaac-service
          - task: TerraformTaskV3@3
            displayName: apply
            inputs:
              provider: azurerm
              command: apply
              environmentServiceNameAzureRM: iaac-service
  - stage: webPublish
    displayName: webPublish
    condition: succeeded('deploy')
    dependsOn: deploy
    jobs:
      - job: webPublishJob
        displayName: webPublish job
        steps:
          - template: webpublish-pipeline.yaml