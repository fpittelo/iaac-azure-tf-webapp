##### Apply Pipeline ######

trigger: none
# - dev
pool:
  vmImage: ubuntu-latest

variables:

  rg_group: 'LABS'
  sa_name: 'iaaclabs'
  cont_name: 'webapp'
  storage_key: 'terraform.tfstate'

stages:
  - stage: validate
    jobs:
      - job: validate
        continueOnError: false
        steps:
        - task: TerraformInstaller@0
          displayName: install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV3@3
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'iaac-service'
            backendAzureRmResourceGroupName: 'LABS'
            backendAzureRmStorageAccountName: 'iaaclabs'
            backendAzureRmContainerName: 'webapp'
            backendAzureRmKey: 'terraform.tfstate'
        - task: TerraformTaskV3@3
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
  - stage: deploy
    condition: succeeded('validate')
    dependsOn: validate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'iaac-service'
              backendAzureRmResourceGroupName: 'LABS'
              backendAzureRmStorageAccountName: 'iaaclabs'
              backendAzureRmContainerName: 'webapp'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV3@3
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'iaac-service'
          - task: TerraformTaskV3@3
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'iaac-service'
  - stage: triggerGitHubWorkflow
    displayName: Trigger GitHub Workflow
    condition: succeeded('deploy')
    dependsOn: deploy
    jobs:
      - job: callGitHubWorkflow
        displayName: Call GitHub Workflow
        steps:
          - powershell: |
              $body = @{
                ref = "refs/heads/dev"
              } | ConvertTo-Json

              $headers = @{
                Authorization = "token $(iaac-webapp-pat)"
                Accept = "application/vnd.github.v3+json"
              }

              Invoke-RestMethod -Uri "https://api.github.com/repos/fpittelo/website/actions/workflows/dev_wap-dv(dev).yml/dispatches" -Method Post -Body $body -Headers $headers
            displayName: 'Invoke GitHub Workflow'
            env:
              iaac-webapp-pat: $(iaac-webapp-pat)  # Use the variable group to reference the PAT
