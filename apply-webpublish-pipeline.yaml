##### Apply Pipeline ######

trigger: none
# - dev
pool:
  vmImage: ubuntu-latest

variables:

  rg_group: 'LABS'
  sa_name: 'iaaclabs'
  cont_name: 'iaacazuretfwebapp'
  storage_key: 'terraform.tfstate'

stages:
  - stage: validate
    jobs:
      - job: validate
        continueOnError: false
        steps:
        - task: TerraformInstaller@0
          displayName: install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV3@3
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'terraform'
            backendAzureRmResourceGroupName: 'FRED'
            backendAzureRmStorageAccountName: 'iaaclabs'
            backendAzureRmContainerName: 'iaacazuretfwebapp'
            backendAzureRmKey: 'terraform.tfstate'
        - task: TerraformTaskV3@3
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
  - stage: deploy
    condition: succeeded('validate')
    dependsOn: validate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'terraform'
              backendAzureRmResourceGroupName: 'FRED'
              backendAzureRmStorageAccountName: 'iaaclabs'
              backendAzureRmContainerName: 'iaacazuretfwebapp'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV3@3
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'terraform'
          - task: TerraformTaskV3@3
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'terraform'
  - stage: webpublish
    condition: succeeded('deploy')
    dependsOn: deploy
    jobs:
    - job: webpublish
      steps:
        - checkout: git://fpittelo/website@dev  # Specify your GitHub repo and branch
          displayName: 'Checkout dev branch'

        # Add a step to zip your PHP files
        - script: zip -r app.zip .
          displayName: 'Package PHP Application'

        - task: AzureRmWebAppDeployment@4
          inputs:
            displayName: webpublish
            ConnectionType: 'AzureRM'
            azureSubscription: 'terraform'  # Define your Azure subscription service connection
            appType: 'webAppLinux'  # Use 'webAppLinux' or 'webApp' depending on your app type
            WebAppName: 'wap-dv'  # The name of the Azure Web App
            packageForLinux: '$(System.DefaultWorkingDirectory)/app.zip'  # Path to your PHP code or package
            # Additional parameters as needed